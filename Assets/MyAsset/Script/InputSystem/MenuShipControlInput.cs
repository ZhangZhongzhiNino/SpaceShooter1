//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/MyAsset/Script/InputSystem/MenuShipControlInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @MenuShipControlInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @MenuShipControlInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""MenuShipControlInput"",
    ""maps"": [
        {
            ""name"": ""PlayerIn"",
            ""id"": ""9ffc204a-e3c6-4add-ad6f-536d6310161c"",
            ""actions"": [
                {
                    ""name"": ""Quit"",
                    ""type"": ""Button"",
                    ""id"": ""5b777a60-4dfc-47df-9232-edfe85ab74dd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""A1"",
                    ""type"": ""Button"",
                    ""id"": ""987fb7d9-88a5-4326-b4e7-592e40fbd591"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""A2"",
                    ""type"": ""Button"",
                    ""id"": ""3ba539d4-4d84-44f1-9824-d6caf072020e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""A3"",
                    ""type"": ""Button"",
                    ""id"": ""fd9dcadd-684c-4e77-b822-580393240672"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""bee8744a-454d-43bb-88c1-ff7efc8c0be5"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Quit"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1201181f-3967-4254-a4f3-9a9a38ec3117"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""A1"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b0458b31-4ed4-4fa4-a4be-8d7e5b25fcd6"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""A2"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""32571214-f8ed-4252-b8dc-c22f87a28f6a"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""A3"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""KeyboardMouse"",
            ""bindingGroup"": ""KeyboardMouse"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // PlayerIn
        m_PlayerIn = asset.FindActionMap("PlayerIn", throwIfNotFound: true);
        m_PlayerIn_Quit = m_PlayerIn.FindAction("Quit", throwIfNotFound: true);
        m_PlayerIn_A1 = m_PlayerIn.FindAction("A1", throwIfNotFound: true);
        m_PlayerIn_A2 = m_PlayerIn.FindAction("A2", throwIfNotFound: true);
        m_PlayerIn_A3 = m_PlayerIn.FindAction("A3", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // PlayerIn
    private readonly InputActionMap m_PlayerIn;
    private IPlayerInActions m_PlayerInActionsCallbackInterface;
    private readonly InputAction m_PlayerIn_Quit;
    private readonly InputAction m_PlayerIn_A1;
    private readonly InputAction m_PlayerIn_A2;
    private readonly InputAction m_PlayerIn_A3;
    public struct PlayerInActions
    {
        private @MenuShipControlInput m_Wrapper;
        public PlayerInActions(@MenuShipControlInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Quit => m_Wrapper.m_PlayerIn_Quit;
        public InputAction @A1 => m_Wrapper.m_PlayerIn_A1;
        public InputAction @A2 => m_Wrapper.m_PlayerIn_A2;
        public InputAction @A3 => m_Wrapper.m_PlayerIn_A3;
        public InputActionMap Get() { return m_Wrapper.m_PlayerIn; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerInActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerInActions instance)
        {
            if (m_Wrapper.m_PlayerInActionsCallbackInterface != null)
            {
                @Quit.started -= m_Wrapper.m_PlayerInActionsCallbackInterface.OnQuit;
                @Quit.performed -= m_Wrapper.m_PlayerInActionsCallbackInterface.OnQuit;
                @Quit.canceled -= m_Wrapper.m_PlayerInActionsCallbackInterface.OnQuit;
                @A1.started -= m_Wrapper.m_PlayerInActionsCallbackInterface.OnA1;
                @A1.performed -= m_Wrapper.m_PlayerInActionsCallbackInterface.OnA1;
                @A1.canceled -= m_Wrapper.m_PlayerInActionsCallbackInterface.OnA1;
                @A2.started -= m_Wrapper.m_PlayerInActionsCallbackInterface.OnA2;
                @A2.performed -= m_Wrapper.m_PlayerInActionsCallbackInterface.OnA2;
                @A2.canceled -= m_Wrapper.m_PlayerInActionsCallbackInterface.OnA2;
                @A3.started -= m_Wrapper.m_PlayerInActionsCallbackInterface.OnA3;
                @A3.performed -= m_Wrapper.m_PlayerInActionsCallbackInterface.OnA3;
                @A3.canceled -= m_Wrapper.m_PlayerInActionsCallbackInterface.OnA3;
            }
            m_Wrapper.m_PlayerInActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Quit.started += instance.OnQuit;
                @Quit.performed += instance.OnQuit;
                @Quit.canceled += instance.OnQuit;
                @A1.started += instance.OnA1;
                @A1.performed += instance.OnA1;
                @A1.canceled += instance.OnA1;
                @A2.started += instance.OnA2;
                @A2.performed += instance.OnA2;
                @A2.canceled += instance.OnA2;
                @A3.started += instance.OnA3;
                @A3.performed += instance.OnA3;
                @A3.canceled += instance.OnA3;
            }
        }
    }
    public PlayerInActions @PlayerIn => new PlayerInActions(this);
    private int m_KeyboardMouseSchemeIndex = -1;
    public InputControlScheme KeyboardMouseScheme
    {
        get
        {
            if (m_KeyboardMouseSchemeIndex == -1) m_KeyboardMouseSchemeIndex = asset.FindControlSchemeIndex("KeyboardMouse");
            return asset.controlSchemes[m_KeyboardMouseSchemeIndex];
        }
    }
    public interface IPlayerInActions
    {
        void OnQuit(InputAction.CallbackContext context);
        void OnA1(InputAction.CallbackContext context);
        void OnA2(InputAction.CallbackContext context);
        void OnA3(InputAction.CallbackContext context);
    }
}
